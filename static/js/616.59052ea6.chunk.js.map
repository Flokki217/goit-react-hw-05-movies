{"version":3,"file":"static/js/616.59052ea6.chunk.js","mappings":"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","sources":["components/fetchFunctions.jsx","webpack://react-homework-template/./src/pages/MovieDetails.module.css?6cd2","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7432f01d7cccbefe000838c110a92cf9';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`\n  );\n  return response.data.results;\n};\n\nexport const fetchDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\nexport const fetchCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"MovieDetails_btn__t5pTm\",\"wrapp\":\"MovieDetails_wrapp__xMYHe\",\"link\":\"MovieDetails_link__wv3O1\"};","import { useEffect, useState } from 'react';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { fetchDetails } from '../components/fetchFunctions';\nimport { Suspense } from 'react';\nimport Notiflix from 'notiflix';\nimport css from './MovieDetails.module.css';\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [previousLocation, setPreviousLocation] = useState(\n    location.state?.from ?? '/'\n  );\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        const movie = await fetchDetails(movieId);\n        setMovie(movie);\n      } catch (error) {\n        Notiflix.Notify.failure(error);\n      }\n    };\n    getMovie();\n    if (!location.state?.from) {\n      setPreviousLocation(location.pathname);\n    }\n  }, [movieId, location]);\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    id,\n  } = movie;\n  const shouldDisplayInfo =\n    poster_path &&\n    title &&\n    release_date &&\n    vote_average &&\n    overview &&\n    genres &&\n    genres.length > 0;\n\n  return (\n    <>\n      {shouldDisplayInfo ? (\n        <>\n          <Link className={css.btn} to={previousLocation}>\n            Go back\n          </Link>\n          <div className={css.wrapp}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt=\"Movie poster\"\n              width={300}\n              height={400}\n            />\n            <div>\n              <h1>\n                {title} {`(${release_date.split('-')[0]})`}\n              </h1>\n              <p>User Score: {Number(vote_average).toFixed(1)}</p>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <div>\n                {genres.map(({ id, name }) => (\n                  <p key={id}>{name}</p>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div></div>\n          <div>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                <Link\n                  className={css.link}\n                  to={`/movies/${id}/cast`}\n                  state={{ from: location }}\n                >\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link\n                  className={css.link}\n                  to={`/movies/${id}/reviews`}\n                  state={{ from: location }}\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n            <Suspense fallback={<div>Loading info...</div>}>\n              <div></div>\n              <Outlet />\n            </Suspense>\n          </div>\n        </>\n      ) : (\n        <div>No information</div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchBySearch","query","fetchDetails","movieId","fetchCredits","cast","fetchReviews","useState","movie","setMovie","useParams","location","useLocation","state","from","previousLocation","setPreviousLocation","useEffect","getMovie","Notiflix","pathname","poster_path","title","release_date","vote_average","overview","genres","id","shouldDisplayInfo","length","className","css","to","src","alt","width","height","split","Number","toFixed","map","name","Suspense","fallback"],"sourceRoot":""}